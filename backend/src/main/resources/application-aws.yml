server:
  port: 8080
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024
  tomcat:
    max-connections: 2000
    max-threads: 200
    min-spare-threads: 10

spring:
  application:
    name: payment-system
  
  # DataSource configuration using AWS RDS
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT:5432}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      pool-name: PaymentSystemCP
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        generate_statistics: false
    open-in-view: false
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true
  
  # Redis configuration using AWS ElastiCache
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
  
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      timeout: 2000ms
      ssl: true
      lettuce:
        pool:
          max-active: 20
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
        cluster:
          refresh:
            adaptive: true
            period: 30s
  
  # Security configuration
  security:
    jwt:
      secret: ${JWT_SECRET}
      expiration: 86400000  # 24 hours
      refresh-expiration: 604800000  # 7 days

# Logging configuration for AWS CloudWatch
logging:
  level:
    com.enterprise.payment: INFO
    com.zaxxer.hikari: WARN
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.springframework.web: WARN
    org.springframework.data.redis: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] %logger{36} - %msg%n"
  file:
    name: /app/logs/payment-system.log
    max-size: 10MB
    max-history: 5

# Actuator configuration for health checks and monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
      probes:
        enabled: true
    metrics:
      enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:aws}

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      payment-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
  retry:
    instances:
      payment-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        enable-exponential-backoff: true
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
  timelimiter:
    instances:
      payment-service:
        timeout-duration: 3s

# Application-specific configuration
payment:
  security:
    rate-limit:
      requests-per-minute: 1000
      burst-capacity: 100
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:https://yourdomain.com}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
  
  encryption:
    algorithm: AES/GCM/NoPadding
    key-length: 256
  
  monitoring:
    tracing:
      enabled: true
      sampling-rate: 0.1

# AWS specific configurations
aws:
  region: ${AWS_REGION:us-east-1}
  
cloud:
  aws:
    region:
      static: ${AWS_REGION:us-east-1}
    stack:
      auto: false 