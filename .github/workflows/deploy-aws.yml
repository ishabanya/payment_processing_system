name: Deploy to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_BACKEND_REPOSITORY: payment-system-production/backend
  ECR_FRONTEND_REPOSITORY: payment-system-production/frontend
  ECS_CLUSTER: payment-system-cluster
  ECS_BACKEND_SERVICE: payment-system-production-backend
  ECS_FRONTEND_SERVICE: payment-system-production-frontend

jobs:
  # Test Jobs
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: payment_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run backend tests
        working-directory: ./backend
        run: |
          mvn clean test -Dspring.profiles.active=test
          mvn jacoco:report

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/target/site/jacoco/jacoco.xml
          flags: backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy Jobs
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECR_BACKEND_REPOSITORY=payment-system-production/backend" >> $GITHUB_ENV
            echo "ECR_FRONTEND_REPOSITORY=payment-system-production/frontend" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "ECR_BACKEND_REPOSITORY=payment-system-staging/backend" >> $GITHUB_ENV
            echo "ECR_FRONTEND_REPOSITORY=payment-system-staging/frontend" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build backend image
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest ./backend
          
          # Push images
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest

      - name: Build, tag, and push frontend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build frontend image with build args
          docker build \
            --build-arg VITE_API_BASE_URL=https://api.${{ env.ENVIRONMENT }}.yourdomain.com/api/v1 \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG \
            ./frontend
          docker build \
            --build-arg VITE_API_BASE_URL=https://api.${{ env.ENVIRONMENT }}.yourdomain.com/api/v1 \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest \
            ./frontend
          
          # Push images
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest

      - name: Update backend ECS service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ENVIRONMENT }}-backend \
            --query 'taskDefinition' \
            --output json)
          
          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.placementConstraints,.compatibilities,.registeredAt,.registeredBy)')
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --region ${{ env.AWS_REGION }}
          
          # Update service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service ${{ env.ENVIRONMENT }}-backend \
            --task-definition ${{ env.ENVIRONMENT }}-backend \
            --region ${{ env.AWS_REGION }}

      - name: Update frontend ECS service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ENVIRONMENT }}-frontend \
            --query 'taskDefinition' \
            --output json)
          
          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG" \
            '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.placementConstraints,.compatibilities,.registeredAt,.registeredBy)')
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEFINITION" \
            --region ${{ env.AWS_REGION }}
          
          # Update service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service ${{ env.ENVIRONMENT }}-frontend \
            --task-definition ${{ env.ENVIRONMENT }}-frontend \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for backend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services ${{ env.ENVIRONMENT }}-backend \
            --region ${{ env.AWS_REGION }}
          
          echo "Waiting for frontend service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services ${{ env.ENVIRONMENT }}-frontend \
            --region ${{ env.AWS_REGION }}

      - name: Send Slack notification on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ‚úÖ Deployment to ${{ env.ENVIRONMENT }} completed successfully!
            
            üîó Application: https://${{ env.ENVIRONMENT }}.yourdomain.com
            üîó API: https://api.${{ env.ENVIRONMENT }}.yourdomain.com
            
            üìä Commit: ${{ github.sha }}
            üë§ Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Deployment to ${{ env.ENVIRONMENT }} failed!
            
            üìä Commit: ${{ github.sha }}
            üë§ Author: ${{ github.actor }}
            üîó Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Infrastructure Deployment (Terraform)
  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.modified, 'aws/terraform/')

    defaults:
      run:
        working-directory: aws/terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="redis_auth_token=${{ secrets.REDIS_AUTH_TOKEN }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="certificate_arn=${{ secrets.CERTIFICATE_ARN }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

  # Database Migration Job
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get database connection info from Parameter Store
          DB_ENDPOINT=$(aws ssm get-parameter --name "/payment-system-production/db/host" --query 'Parameter.Value' --output text)
          DB_NAME=$(aws ssm get-parameter --name "/payment-system-production/db/name" --query 'Parameter.Value' --output text)
          DB_USERNAME=$(aws ssm get-parameter --name "/payment-system-production/db/username" --query 'Parameter.Value' --output text)
          DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "payment-system-production/db/password" --query 'SecretString' --output text)
          
          # Run migration using ECS task
          aws ecs run-task \
            --cluster $ECS_CLUSTER \
            --task-definition payment-system-production-migration \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=DISABLED}" \
            --overrides "{\"containerOverrides\":[{\"name\":\"migration\",\"environment\":[{\"name\":\"DB_HOST\",\"value\":\"$DB_ENDPOINT\"},{\"name\":\"DB_NAME\",\"value\":\"$DB_NAME\"},{\"name\":\"DB_USERNAME\",\"value\":\"$DB_USERNAME\"},{\"name\":\"DB_PASSWORD\",\"value\":\"$DB_PASSWORD\"}]}]}" 